---
title: "Manuscript Basics"
---

## Overview

Manuscripts are a type of Quarto project that allow you to write scholarly articles where computational notebooks are both the source of the article, and part of the published record.

If you are new to Quarto manuscripts, start with the [Manuscript Tutorial](/docs/manuscripts).

On this page, you can learn how to start a manuscript from scratch, and control aspects of the manuscript output.

## Creating a Manuscript Project {#create}

To identify a project as a manuscript specify `type: manuscript` in your `_quarto.yml` configuration file:

``` {.yaml filename="_quarto.yml"}
project: 
  type: manuscript
```

Then, author your article content in either a Jupyter Notebook called `index.ipynb` or a Quarto document called `index.qmd`.

You can control many manuscript options with the `manuscript` key in your configuration file.
For instance, you can specify a file other than `index.*` for your article source using the `article` key, e.g.:

``` {.yaml filename="_quarto.yml"}
manuscript:
  article: earthquakes.qmd
```

If you would rather start with some template content, you can create a new manuscript project from the command line with:

``` {.bash filename="Terminal"}
quarto create project manuscript
```

## MECA Archive

One of the formats a manuscript project can produce is a Manuscript Exchange Common Approach (MECA) bundle.
This bundle is a standardized way to transport your manuscript and its resources, including computational notebooks.

A MECA bundle is produced if the `jats` format is listed as an output format for your article:

``` {.yaml filename="_quarto.yml"}
format:
  html: default
  jats: default
```

Or, you can explicitly set `meca-archive` to `true` in the `manuscript` options:

``` {.yaml filename="_quarto.yml"}
manuscript:
  meca-archive: true
```

By default the MECA bundle is named after your article file, e.g. `index-meca.zip`, but you can also use `meca-archive` to provide a file name:

``` {.yaml filename="_quarto.yml"}
manuscript:
  meca-archive: "archive.zip"
```

## Manuscript URL

You can set the URL of your manuscript with `manuscript-url`:

``` {.yaml filename="_quarto.yml"}
manuscript:
  manuscript-url: 
```

## Including Notebooks

Any notebook files (`.qmd` or `.ipynb`) that are included in your project directory will become part of your manuscript.
These notebooks will be rendered to an HTML notebook view, and will be linked from your manuscript webpage under "Notebooks".

The text for link under "Notebooks" will be the notebook `title` as set in its YAML metadata, of if that isn't set, the first markdown heading in the notebook.
If neither exist, the link text will be the notebook file name.

You can set the title of the notebook view for a notebook  using `notebooks`:

``` {.yaml filename="_quarto.yml"}
manuscript:
  notebooks:
    - notebook: notebooks/data-screening.ipynb
      title: Data Processing
```

## Including Other Resources

Quarto will attempt to include resources needed to render your notebooks to HTML on the manuscript website.
However, you can also explicitly include resources using `resources`.
For example, to include a data file you've put in `data/earthquakes.csv` you would specify:

``` {.yaml filename="_quarto.yml"}
manuscript:
  resources:
    - data/earthquakes.csv
```

This ensures readers can access your data at: `{manuscript-url}/data/earthquakes.csv`.

## Add a Journal Template

Our template included the format `agu-pdf`, a PDF that uses the American Geophysical Union's style guide.
You can find a list of other available journal formats on the [Quarto Extensions: Journal Articles](/docs/extensions/listing-journals.html) page.
To use another journal format, for example the **acs** format, you'll need to complete two steps:

1.  Install the appropriate journal format.
    You'll most likely be installing in an existing project, so you'll use the `quarto install extension` command, e.g.:

    ``` {.bash filename="Terminal"}
    quarto install extension quarto-journals/acs
    ```

    The extension identifier, `quarto-journals/acs`, is the GitHub user and repository for the extension.
    You'll generally find this, and the exact installation command in the extension's documentation.

2.  Add the `format` to your configuration file:

    ``` {.yaml filename="_quarto.yml"}
    format:
      html: default
      docx: default
      jats: default
      acs-pdf: default
    ```

    The format will be the extension's name (`acs`), followed by an existing Quarto format (`-pdf`).
