---
title: "Quarto Dashboards"
code-annotations: select
lightbox: auto
format:
  html:
    include-in-header: 
      - '../download/_download.html'
    include-after-body: 
      text: |
        <script type="text/javascript">
        window['quarto-download-release'] = true;
        window['quarto-download-prerelease'] = true;
        window['quarto-download-nonews'] = true;
        window["quarto-prerelease-mode"] = '{{< meta prerelease-mode >}}';
        </script>   
---

{{< include /docs/prerelease/1.4/_pre-release-feature.qmd >}}

## Overview

Quarto Dashboards make it easy to create interactive dashboards using Python, R, Julia, and Observable:

-   Publish a group of related data visualizations as a dashboard. Use a wide variety of components including [Plotly](https://plotly.com/python/),Â [Leaflet](https://ipyleaflet.readthedocs.io/en/latest/), [Jupyter Widgets](/docs/interactive/widgets/jupyter.qmd), [htmlwidgets](https://www.htmlwidgets.org/); static graphics (Matplotlib, Seaborn, ggplot2, etc.); tabular data; value boxes; and text annotations.

-   Flexible and easy to specify row and column-based [Layouts](layouts.qmd). Components are intelligently re-sized to fill the browser and adapted for display on mobile devices.

-   Author using any notebook editor ([JupyterLab](/docs/tools/jupyter-lab.qmd), etc.) or in plain text markdown with any text editor ([VS Code](/docs/tools/vscode.qmd), [RStudio](/docs/tools/rstudio.qmd), [Neovim](/docs/tools/neovim.qmd), etc.)

-   Dashboards can be deployed as static web pages (no special server required) or you can optionally integrate a backend [Shiny Server](/docs/dashboards/interactivity/shiny-python.qmd) for enhanced interactivity.

## Examples

You can create highly customized layouts and use a wide variety of dashboard themes as illustrated in these examples (click to see them in more detail):

::: {layout-ncol="3"}
![](/docs/dashboards/examples/thumbnails/stock-explorer-dashboard.png){.border}

![](/docs/dashboards/examples/thumbnails/customer-churn-dashboard.png){.border}

![](/docs/dashboards/examples/thumbnails/penguins-dashboard.png){.border}
:::

See the [examples gallery](examples/index.qmd) for additional examples and links to source code.

## Walkthrough

Here we'll walk through a simple example to illustrate the basics. Then, we'll provide detailed instructions on how to get started with building your own dashboards.

This simple single-page Python dashboard uses interactive Plotly visualizations to explore development indicators in the [Gapminder](http://www.gapminder.org/data/) dataset. The dashboard includes two rows, the second of which includes two columns:

![](images/gapminder.png){.border}

Dashboards consist of several components:

1)  **Navigation Bar** --- Icon, title, and author along with links to sub-pages (if more than one page is defined).

2)  **Pages, Rows, Columns, and Tabsets** --- Pages, rows and columns are defined using markdown headings (with optional attributes to control height, width, etc.). Tabsets can be used to further divide content within a row or column.

3)  **Cards and Sidebars** --- Cards are containers for plots, data display, and free form content. The content of cards typically maps to *cells* in your notebook or source document. Sidebars are used to present inputs within interactive dashboards.

Dashboards can be created either using Jupyter notebooks (`.ipynb`) or using plain text markdown (`.qmd`). Here is the code for the notebook version of the above example (click the image for a zoomed view):

![](images/gapminder-jupyter.png){.border}

Here is the plain text `.qmd` version of the dashboard (click on the numbers on the far right for additional explanation of syntax and mechanics):

```` python
--- 
title: "Development Indicators by Continent" # <1>
author: "Gapminder Analytics Group" # <1>
format: dashboard # <1>
--- 

```{{python}}
import plotly.express as px
df = px.data.gapminder()
```

## Row {height=60%} # <2>

```{{python}}  # <3>
#| title: GDP and Life Expectancy 
px.scatter(  
  df, x="gdpPercap", y="lifeExp", 
  animation_frame="year", animation_group="country", 
  size="pop", color="continent", hover_name="country",
  facet_col="continent", log_x=True, size_max=45, 
  range_x=[100,100000], range_y=[25,90] 
)  
``` # <3>

## Row {height=40%}

```{{python}} # <4>
#| title: Population
px.area(
  df, x="year", y="pop", 
  color="continent", line_group="country"
)
```

```{{python}}
#| title: Life Expectancy
px.line(
  df, x="year", y="lifeExp", 
  color="continent", line_group="country"
)
``` # <4>
````

1.  The document options define the `title` and `author` for the navigation bar as well as specifying the use of the `dashboard` format.
2.  Rows and columns are defined using headers. In this example we define two rows and specify their relative sizes using the `height` option.
3.  Computational cells become cards that live within rows or columns. Cards can have an optional title (which here we specify using the `title` option).
4.  The second row includes two computational cells, which are automatically spit into two side by side cards.

## Getting Started

### Step 1: Install Quarto Pre-Release

Dashboards are a feature in the upcoming 1.4 release of Quarto and are still under active development. Before you get started, make sure you install the **latest pre-release** version of Quarto.

If you are using Quarto within a Python environment you can install the pre-release with `pip` as follows:

```{.bash filename="Terminal"}
pip install git+https://github.com/quarto-dev/quarto-cli
```

Alternatively, run the global installer for your platform:

{{< include ../download/_download-pre.md >}}

```{=html}
<style type="text/css">
#download-pre-table {
  display: none;
}
</style>
```

You can find release notes and installers for all platforms at <https://quarto.org/docs/download/prerelease.html>

### Step 2: Learn the Basics

Next, learn how to create navigation and layout structures and present various types of data:

- [Dashboard Components](components.qmd)

- [Data Presentation](data-presentation.qmd)

These artilces will provide you with a broad overview of the core concepts and capabilities of dashboards, documentation on all of the main dashboard components, and details on using plots, tables, value boxes, and text content within dashboards. 

### Step 3: Explore Further

Once you've mastered the basics, check out these additional articles to learn more.

{{< include _learning-more.md >}}
