{
  "hash": "ec2fa00364de904a79fc2298fdc4d10d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Typst Basics\"\ntbl-colwidths: [35,65]\naliases: \n  - /docs/prerelease/1.4/typst.html\nproject:\n  pre-render:\n    - quarto run ../../tools/snapshot-typst.ts examples/gt-temps.qmd images/typst-tables-gt-temps.png\n\n---\n\n\n\n::: {.callout-note}\n## Quarto 1.4 Feature\n\nThis feature is new in Quarto 1.4. Download the latest version of Quarto at the [download page](/docs/download/index.qmd)\n:::\n\n\n\n## Overview\n\n[Typst](https://github.com/typst/typst) is a new open-source markup-based typesetting system that is designed to be as powerful as LaTeX while being much easier to learn and use. Typst creates beautiful PDF output with blazing fast render times.\n\nUse the `typst` format to create a PDF document via Typst. For example:\n\n```{.yaml filename=\"hello-typst.qmd\"}\n---\ntitle: \"Hello Typst!\"\nformat:\n  typst:\n    toc: true\n    section-numbering: 1.1.a\n    columns: 2\n---\n```\n\nRendering or previewing this document will invoke the Typst CLI to create `hello-typst.pdf`, a PDF file, from your markdown source file. Quarto includes the Typst CLI so no separate installation of Typst is required.\n\nThe above example highlights a few of the options available for Typst output. This document covers these and other options in detail. See the Typst [format reference](/docs/reference/formats/typst.qmd) for a complete list of all available options.\n\nOne of the highlights of Typst is the ease of creating highly customized templates. For example, here are some Typst templates that you can use in Quarto as custom formats:\n\n::: {layout-ncol=4}\n\n![IEEE](images/typst-format-ieee.png){.lightbox group=\"custom-formats\" fig-alt=\"Screenshot of a page showing a article styled according IEEE standards. The title is centered with authors below in two columns.\"}\n\n![Poster](images/typst-format-poster.png){.lightbox group=\"custom-formats\" fig-alt=\"Screenshot of a poster in landscape orientiation. The poster includes a logo in the top right, a title in the top left, and content arranged in three columns.\"}\n\n![Letter](images/typst-format-letter.png){.lightbox group=\"custom-formats\" fig-alt=\"Screenshot of a page showing a letter. A sender address is across the top of the page, followed by a recipient address left justified. The body of the letter includes a subject line in bold.\"}\n\n![Dept News](images/typst-format-dept-news.png){.lightbox group=\"custom-formats\" fig-alt=\"Screenshot of a page showing a department newsletter. The page is split vertically with a white column on the left and a red one on the right. An image spans across the column with the text \\\"Award Winning Science\\\" oriented to run vertically down its right side.\"}\n\n:::\n\n Learn more about how to use them, and how to create your own in [Custom Formats](typst-custom.qmd).\n\n## Known Limitations\n\nSince Typst is under active development, there are still some limitations to Quarto's Typst support:\n\n-   The default size of images may not reflect the behavior you are used to in other output formats. This is a problem that Typst, pandoc and Quarto are actively working to fix. In the meantime, you can manually [specify image widths](/docs/authoring/figures.qmd#figure-sizing).\n\n-   Advanced page layout (e.g. using the `.column` classes as explained in [Article Layout](/docs/authoring/article-layout.qmd)) is not implemented.\n\n-   Various other small things might not yet be implemented. Please [let us know](https://github.com/quarto-dev/quarto-cli/issues/new/choose) if you see things that could use improvement!\n\n## Page Layout\n\nYou can control the size of the page (`papersize`), the page margins (`margin`), and the number of columns used for page content (`columns`). For example, the following YAML modifies all three options:\n\n```yaml\n---\ntitle: Page Layout\nformat:\n  typst:\n    papersize: a5\n    margin:\n      x: 1cm\n      y: 1cm\n    columns: 2\n---\n```\n\nThe resulting layout is shown below alongside an example of the default layout:\n\n:::{layout-ncol=2}\n\n![Customized Layout](images/typst-custom-page.png){.border fig-alt=\"Screenshot of one page of PDF document. The document shows a two columns of text. Compared to the previous screenshot, the page is narrower and longer, and the margins are smaller.\"}\n\n![Default Layout](images/typst-default-page.png){.border fig-alt=\"Screenshot of one page of PDF document. The document shows a single column of text.\"}\n\n:::\n\nYou can read more about these page layout options in the sections below.\n\n### Paper Size\n\nThe `papersize` option expects a string matching one of Typst's supported [paper sizes](https://typst.app/docs/reference/layout/page/#parameters-paper). The default template is equivalent to:\n\n```yaml\npapersize: us-letter\n```\n\n### Margins\n\nThe `margin` option expects one or more of the suboptions: `x`, `y`, `top`, `bottom`, `left` and `right`. The default template uses margins equivalent to:\n\n```yaml\nmargin:\n  x: 1.25in\n  y: 1.25in\n```\n\nThis sets the margins in the horizontal direction (`x`), i.e. `left` and `right`, as well as the margins in the vertical direction (`y`), i.e. `top` and `bottom` to 1.25 inches.\n\nThe values for the margins are specfied using Typst's [length](https://typst.app/docs/reference/layout/length/), (e.g. `5cm`) or  [relative length](https://typst.app/docs/reference/layout/relative/) (e.g. `10%`) types. You can specify a single margin:\n\n```yaml\nmargin:\n  left: 1cm\n```\n\nThen, any unspecified margins will inherit from the default margins.\n\n### Columns\n\nThe `columns` option expects a number - the number of columns your body content should have. The default template sets `columns` to `1`. \n\n\n\n## Table of Contents\n\nUse the `toc` option to include an automatically generated table of contents in the output document. Use the `toc-depth` option to specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents). For example:\n\n``` yaml\ntoc: true\ntoc-depth: 2\n```\n\nYou can customize the title used for the table of contents using the `toc-title` option:\n\n``` yaml\ntoc-title: Contents\n```\n\nIf you want to exclude a heading from the table of contents, add both the `.unnumbered` and `.unlisted` classes to it:\n\n``` markdown\n### More Options {.unnumbered .unlisted}\n```\n\n\n\nThe `toc-indent` option controls how far entries are indented in the displayed table of contents. The default is equivalent to:\n\n```{.yaml}\ntoc-indent: 1.5em\n```\n\n\n## Section Numbering\n\nUse the `number-sections` option to number section headings in the output document. For example:\n\n``` yaml\nnumber-sections: true\n```\n\nUse the `number-depth` option to specify the deepest level of heading to add numbers to (by default all headings are numbered). For example:\n\n``` yaml\nnumber-depth: 3\n```\n\nTo exclude an individual heading from numbering, add the `.unnumbered` class to it:\n\n``` markdown\n### More Options {.unnumbered}\n```\n\n\n\nYou can also customize the display of the section numbers with the `section-numbering` YAML option. This option expects a string that describes the numbering schema. For example, the following schema describes numbering sections with numerals, subsection with uppercase letters, and subsubsections with lower case letters, using `.` as a separator:\n\n```yaml\n---\nsection-numbering: 1.A.a\n---\n```\n\nYou can read more about sepcifying the numbering schema in the [Typst documentation for numbering](https://typst.app//docs/reference/model/numbering#parameters-numbering).\n\n\n## Code Annotation\n\nYou can add annotations to lines of code in code blocks and executable code cells. See [Code Annotation](/docs/authoring/code-annotation.qmd) for full details.\n\n\n\n## Bibliography\n\nTypst comes with its [own citation processing system for bibliographies](https://typst.app/docs/reference/model/bibliography/) and using `format: typst` defaults to it. To specify a bibliography style using Typst's system, use the `bibliographystyle` option. Provide a string from [Typst's list of built-in styles](https://typst.app/docs/reference/model/bibliography/#parameters-style), e.g.:\n\n``` yaml\nbibliography: refs.bib\nbibliographystyle: apa\n```\n\nOr alternatively, provide a path to a local CSL file:\n\n``` yaml\nbibliography: refs.bib\nbibliographystyle: my-csl-style.csl\n```\n\nIf you prefer to use Pandoc's citation processing, set `citeproc: true` explicitly in YAML header:\n\n``` yaml\nciteproc: true\nbibliography: refs.bib\ncsl: https://www.zotero.org/styles/apa-with-abstract\n```\n\nTo provide a citation style file to Pandoc's citation processing system use the `csl` option, as described in [Citation Style](/docs/authoring/footnotes-and-citations.qmd#sec-citations-style).\n\n\n## Typst Blocks\n\nIf you want to change the appearance of blocks using native [Typst `#block()`](https://typst.app/docs/reference/layout/block/) calls, you can add the `.block` class to a Div and provide whatever arguments are appropriate. For example:\n\n```` markdown\n::: {.block fill=\"luma(230)\" inset=\"8pt\" radius=\"4pt\"}\n\nThis is a block with gray background and slightly rounded corners.\n\n:::\n````\n\nThis gets compiled to\n\n```` default\n#block(fill:luma(230), inset:8pt, radius:4pt,\n[This is a block with gray background and slightly rounded corners.])\n````\n\n## Raw Typst \n\nIf you want to use raw `typst` markup, use a raw `typst` block. For example:\n\n```` default\n```{=typst} \n#set par(justify: true)\n\n== Background \nIn the case of glaciers, fluid dynamics principles can be used to understand how the movement and behavior of the ice is influenced by factors such as temperature, pressure, and the presence of other fluids (such as water).\n```\n````\n\nTo learn more about `typst` markup, see the tutorial here: <https://typst.app/docs/tutorial/>.\n\n## Typst CSS\n\nTo allow similar styling between HTML and Typst, Quarto will translate CSS properties into Typst properties.\n\nYou can use CSS properties directly in your Quarto markup, and they will get translated to appropriate Typst elements and properties\n\nFor example, text-related properties `color`, `opacity`, and `background-color` can be applied to spans:\n\n```qmd\nHere is a [span with a green background]{style=\"background-color:green\"}.\n```\n\n`font-family` and `font-size` can be applied to a div or table:\n\n```qmd\n:::{style=\"font-family: helvetica\"}\nThis div is rendered in Helvetica.\n:::\n```\n\nSee [the Advanced documentation](/docs/advanced/typst/typst-css.qmd#supported-elements-and-properties) for supported elements and properties, and how to add more using Lua filters.\n\nYou are most likely to encounter Typst CSS when using libraries that produce HTML tables. Here is a temperature heatmap example using `gt` in R. Pandas soon.\n\n::: {.panel-tabset}\n\n#### R - gt\n![](images/typst-tables-gt-temps.png){height=200px}\n\n[gt temps example](examples/gt-temps.qmd)\n\n#### Python - Pandas\n:::: {layout-ncol=2}\n![](images/typst-tables-pandas-temps.png){height=200px}\n\n````\n\n::: {#4658e924 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ntemps = pd.DataFrame({\n  'year': [*range(1920, 1925)],\n  'Jan': [40.6, 44.2, 37.5, 41.8, 39.3], \n  'Jun': [58.5, 58.7, 57.8, 52.7, 57.7]\n}).set_index('year')\n\ndef make_pretty(styler):\n    styler.background_gradient(axis=None, vmin=31, vmax=66, cmap=\"RdYlGn_r\")\n    return styler\n\ntemps.style.pipe(make_pretty)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<style type=\"text/css\">\n#T_89e5d_row0_col0 {\n  background-color: #96d268;\n  color: #000000;\n}\n#T_89e5d_row0_col1 {\n  background-color: #f57547;\n  color: #f1f1f1;\n}\n#T_89e5d_row1_col0 {\n  background-color: #cdea83;\n  color: #000000;\n}\n#T_89e5d_row1_col1 {\n  background-color: #f57245;\n  color: #f1f1f1;\n}\n#T_89e5d_row2_col0 {\n  background-color: #5ab760;\n  color: #f1f1f1;\n}\n#T_89e5d_row2_col1 {\n  background-color: #f7814c;\n  color: #f1f1f1;\n}\n#T_89e5d_row3_col0 {\n  background-color: #a9da6c;\n  color: #000000;\n}\n#T_89e5d_row3_col1 {\n  background-color: #fed683;\n  color: #000000;\n}\n#T_89e5d_row4_col0 {\n  background-color: #7dc765;\n  color: #000000;\n}\n#T_89e5d_row4_col1 {\n  background-color: #f7844e;\n  color: #f1f1f1;\n}\n</style>\n<table id=\"T_89e5d\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_89e5d_level0_col0\" class=\"col_heading level0 col0\" >Jan</th>\n      <th id=\"T_89e5d_level0_col1\" class=\"col_heading level0 col1\" >Jun</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >year</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_89e5d_level0_row0\" class=\"row_heading level0 row0\" >1920</th>\n      <td id=\"T_89e5d_row0_col0\" class=\"data row0 col0\" >40.600000</td>\n      <td id=\"T_89e5d_row0_col1\" class=\"data row0 col1\" >58.500000</td>\n    </tr>\n    <tr>\n      <th id=\"T_89e5d_level0_row1\" class=\"row_heading level0 row1\" >1921</th>\n      <td id=\"T_89e5d_row1_col0\" class=\"data row1 col0\" >44.200000</td>\n      <td id=\"T_89e5d_row1_col1\" class=\"data row1 col1\" >58.700000</td>\n    </tr>\n    <tr>\n      <th id=\"T_89e5d_level0_row2\" class=\"row_heading level0 row2\" >1922</th>\n      <td id=\"T_89e5d_row2_col0\" class=\"data row2 col0\" >37.500000</td>\n      <td id=\"T_89e5d_row2_col1\" class=\"data row2 col1\" >57.800000</td>\n    </tr>\n    <tr>\n      <th id=\"T_89e5d_level0_row3\" class=\"row_heading level0 row3\" >1923</th>\n      <td id=\"T_89e5d_row3_col0\" class=\"data row3 col0\" >41.800000</td>\n      <td id=\"T_89e5d_row3_col1\" class=\"data row3 col1\" >52.700000</td>\n    </tr>\n    <tr>\n      <th id=\"T_89e5d_level0_row4\" class=\"row_heading level0 row4\" >1924</th>\n      <td id=\"T_89e5d_row4_col0\" class=\"data row4 col0\" >39.300000</td>\n      <td id=\"T_89e5d_row4_col1\" class=\"data row4 col1\" >57.700000</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n````\n::::\n\n:::\n\nNote that [named Typst colors](https://typst.app/docs/reference/visualize/color/#predefined-colors) will be preferred over [named CSS colors](https://developer.mozilla.org/en-US/docs/Web/CSS/named-color). If you want exactly the same color in your HTML and Typst output, specify the color using `rgb()` or hexadecimal `#rrggbb` syntax.\n\nTypst does not support opacity as a filter, so opacity is simulated using the alpha channel of the color.\n\n## Typst File (`.typ`)\n\nThe rendering process produces a native Typst file (`.typ)` which is then compiled to PDF using the Typst CLI. This intermediate file is then automatically removed. If you want to preserve the `.typ` file, use the `keep-typ` option. For example:\n\n``` yaml\n---\ntitle: \"My Document\"\nformat:\n  typst:\n    keep-typ: true\n---\n```\n\nYou can compile a `.typ` file to PDF directly using the `quarto typst compile` command in a terminal. For example:\n\n``` {.bash filename=\"Terminal\"}\n$ quarto typst compile article.typ\n```\n\nThe `quarto typst` command uses the version of Typst built in to Quarto and supports all Typst CLI actions and flags. For example, to determine the version of Typst embedded in Quarto:\n\n``` {.bash filename=\"Terminal\"}\n$ quarto typst --version\n```\n\n## Fonts Support\n\nThe main font used for the document can be specified with the `mainfont` YAML option. Typst will search by default in installed system fonts. You can set additional paths to search using `font-paths`. For example: \n\n``` yaml\n---\ntitle: \"My Document\"\nformat: \n  typst:\n    mainfont: \"Agbalumo\"\n    font-paths: myfonts\n---\n```\n\nThis will search for a `*.ttf` or `*.otf` file matching the font name in the `./myfonts/` directory, in addition to searching in installed system fonts.\n\nThe `TYPST_FONT_PATHS` environment variable is also taken into account for compatibility with Typst configuration, but setting `font-paths` will take precedence over any path set in the `TYPST_FONT_PATHS` environment variable.\n\nSet the base size of the font used in the document with `fontsize`. The size used in the default template is equivalent to:\n\n```yaml\n---\nfontsize: 11pt\n---\n```\n\n## Computation Figure Format\n\nTypst has great support for SVG graphics, so `format: typst` defaults to `fig-format: svg`. This configuration means executable code cells that produce images will produce `.svg` output. \n\nIf you prefer to include raster graphics, set `fig-format` to another value, like for example: \n\n```yaml\nformat:\n  typst:\n    fig-format: png\n```\n\nSee other figure options on the [Typst reference page](/docs/reference/formats/typst.qmd#figures)\n\n## Includes\n\n\nIf you want to include additional content in your document from another file, you can use the `include-in-*` options:\n\n| Option                | Description                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `include-in-header`   | Include contents of *file*, verbatim, at the end of the header. This can be used, for example, to include special CSS or JavaScript in HTML documents or to inject commands into the LaTeX preamble.                                     |\n| `include-before-body` | Include contents of *file*, verbatim, at the beginning of the document body (e.g. after the `<body>` tag in HTML, or the `\\begin{document}` command in LaTeX). This can be used to include navigation bars or banners in HTML documents. |\n| `include-after-body`  | Include contents of *file*, verbatim, at the end of the document body (before the `</body>` tag in HTML, or the `\\end{document}` command in LaTeX).                                                                                      |\n\nYou can specify a single file or multiple files for each of these options directly, or use the `file:` subkey. To include raw content in the YAML header, use the `text` subkey.  When using `text:`, add the `|` character after `text:` to indicate that the value is a multi-line string. If you omit `file:` or `text:`, Quarto assumes you are providing a file.\n\n\n\nFor example:\n\n``` yaml\nformat:\n  typst:\n    include-before-body:\n      - text: |\n          #show heading: set text(navy)\n```\n\n",
    "supporting": [
      "typst_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}